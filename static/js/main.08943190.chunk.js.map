{"version":3,"sources":["utils/history.js","reducer.js","store.js","containers/home/index.js","containers/about/index.js","components/header/index.js","components/loader/index.js","containers/app/index.js","i18n.js","serviceWorker.js","index.js"],"names":["history","createHistory","combineReducers","router","connectRouter","middleware","thunk","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","concat","createStore","rootReducer","connect","state","props","react_default","a","createElement","About","Header","updateLanguage","_this$props","_this","t","i18n","targetLang","changeLanguage","this","id","Link","to","alt","src","width","height","style","maxHeight","maxWidth","onClick","PureComponent","withTranslation","Loader","className","App","react","fallback","loader","components_header","Switch","Route","exact","path","component","Home","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","Boolean","window","location","hostname","match","ReactDOM","render","es","store","esm","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAEeA,QADCC,KCIDC,cAAgB,CAC7BC,OAAQC,YAAcJ,KCElBK,EAAa,CAACC,IAAOC,YAAiBP,IAUtCQ,EAAoBC,IAAOC,WAAP,GACxBC,IAAeD,WAAf,EAAmBL,IADKO,OAXR,KAgBHC,cACbC,EAlBmB,GAoBnBN,6BCbaO,cAFS,SAAAC,GAAK,OAAIA,GAElBD,CARF,SAAAE,GAAK,OAChBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBCEWC,EAPD,kBACZH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,mGCCEE,oNAEJC,eAAiB,WAAM,IAAAC,EACDC,EAAKR,MAAjBS,EADaF,EACbE,EAAGC,EADUH,EACVG,KACLC,EAAaF,EAAE,eAAiB,KACtCC,EAAKE,eAAeD,4EAGb,IACCF,EAAMI,KAAKb,MAAXS,EAER,OACER,EAAAC,EAAAC,cAAA,UAAQW,GAAG,UAETb,EAAAC,EAAAC,cAAA,OAAKW,GAAG,QACNb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,GAAG,KACPf,EAAAC,EAAAC,cAAA,OAAKc,IAAI,OACPC,IAAI,8BACJC,MAAM,OACNC,OAAO,OACPC,MAAO,CACLC,UAAW,QACXC,SAAU,aAMlBtB,EAAAC,EAAAC,cAAA,OAAKW,GAAG,OACNb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,GAAG,KAAMP,EAAE,cACrBR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,GAAG,aAAcP,EAAE,kBAC7BR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,GAAG,YAAaP,EAAE,iBAC5BR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQqB,QAASX,KAAKP,gBAAkBG,EAAE,8BAjCrCgB,kBA2CNC,gBAAkB5B,YAFT,SAACC,GAAD,OAAWA,GAEFD,CAAyBO,ICxC3CsB,EAPA,kBACb1B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACb3B,EAAAC,EAAAC,cAAA,OAAKe,IAAK,8BAA+BU,UAAU,WAAWX,IAAI,SAClEhB,EAAAC,EAAAC,cAAA,2BCiBW0B,EAdH,kBACV5B,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,CAAUC,SAAW9B,EAAAC,EAAAC,cAAC6B,EAAD,OACnB/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjCtC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWlC,mDCVnDM,IAGG8B,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CACJC,YAAa,KACbC,OAA+C,EAE/CC,cAAe,CACbC,aAAa,KAIJtC,EAAf,ECboBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACPtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAUC,MAAOA,GACfxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAiB3E,QAASA,GACxBkB,EAAAC,EAAAC,cAACwD,EAAD,QAGJC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.08943190.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory'\nconst history = createHistory()\nexport default history\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport history from 'utils/history';\n\nexport default combineReducers({\n  router: connectRouter(history),\n})\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport thunk from 'redux-thunk'\nimport history from 'utils/history'\nimport rootReducer from './reducer'\n\nconst initialState = {}\nconst enhancers = []\nconst middleware = [thunk, routerMiddleware(history)]\n\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n)\n\nexport default createStore(\n  rootReducer,\n  initialState,\n  composedEnhancers\n)\n","import React from 'react'\n// import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nconst Home = props => (\n  <div>\n    <h1>Home</h1>\n  </div>\n)\n\nconst mapStateToProps = state => state\n\nexport default connect(\n  mapStateToProps\n)(Home)\n","import React from 'react'\n\nconst About = () => (\n  <div>\n    <h1>About Page</h1>\n    <p>Did you get here via Redux?</p>\n  </div>\n)\n\nexport default About\n","import React, { PureComponent } from 'react'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { withTranslation } from 'react-i18next'\nimport './index.css'\n\nclass Header extends PureComponent {\n\n  updateLanguage = () => {\n    const { t, i18n } = this.props\n    const targetLang = t('changeLang') || 'en'\n    i18n.changeLanguage(targetLang)\n  }\n\n  render() {\n    const { t } = this.props\n\n    return (\n      <header id='header'>\n        {/* logo */}\n        <div id='logo'>\n          <Link to='/'>\n            <img alt='logo'\n              src='images/logo_transparent.png'\n              width='100%'\n              height='100%'\n              style={{\n                maxHeight: '205px',\n                maxWidth: '385px'\n              }}\n            />\n          </Link>\n        </div>\n\t\t\t\t{/* nav */}\n        <nav id='nav'>\n          <ul>\n            <li><Link to='/'>{ t('nav.home') }</Link></li>\n            <li><Link to='/projects'>{ t('nav.projects') }</Link></li>\n            <li><Link to='/contact'>{ t('nav.contact') }</Link></li>\n            <li><button onClick={this.updateLanguage}>{ t('nav.changeLang') }</button></li>\n          </ul>\n        </nav>\n      </header>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => state\n\nexport default withTranslation()(connect(mapStateToProps)(Header))\n","import React from 'react';\n\nconst Loader = () => (\n  <div className=\"App\">\n    <img src={'images/logo_transparent.png'} className=\"App-logo\" alt=\"logo\" />\n    <div>loading...</div>\n  </div>\n)\n\nexport default Loader\n","import React, { Suspense } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Home from '../home'\nimport About from '../about'\n\nimport Header from '../../components/header'\nimport Loader from '../../components/loader'\n\nconst App = () => (\n  <Suspense fallback={ <Loader/> }>\n    <div>\n      <Header />\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/about-us\" component={About} />\n        </Switch>\n      </main>\n    </div>\n  </Suspense>\n)\n\nexport default App\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: process.env.NODE_ENV === 'production' ? false : true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport store from './store'\nimport './index.css';\nimport App from './containers/app';\nimport history from 'utils/history'\nimport './i18n'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}